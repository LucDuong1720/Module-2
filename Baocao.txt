	----------------------------------15/03----------------------------------
Access modifier:
Quy định mức độ truy cập đến lớp và các thành phần của lớp.
- Có 4 phạm vi truy cập của Access modifier:
+ private: Phương thức và thuộc tính chỉ truy cập được ở phạm vi class.
+ default: Nếu không khai báo kiểu access modifier nào thì nó mặc định là default. Default chỉ truy cập được ở phạm vi class và package
+ protected: Phương thức và thuộc tính truy cập ở phạm vi một lớp, một package hoặc các lớp con của lớp đó.
+ public: Truy cập ở mọi nơi.

Biến static trong java:
- Được sử dụng để tham chiếu thuộc tính chung của tất cả các đối tượng.
VD: Codegym tên trung tâm đào tạo lập trình của các học viên thuộc trung tâm này.

Nested class:
- Nested class là một lớp được khai báo bên trong một lớp khác. Trong Java, có hai loại nested class là static nested class và non-static (inner) class.

+ Static nested class: được khai báo là một lớp tĩnh bên trong một lớp khác và được gắn liền với lớp bên ngoài nó. Nó có thể truy cập các thành viên tĩnh của lớp bên ngoài.	
+ Non-static (inner) class: trực thuộc một đối tượng của lớp bên ngoài, có thể truy xuất đến các thành phần của lớp bên ngoài.

Biến local:
- Biến local là biến được khai báo bên trong một phương thức hoặc một khối lệnh. Biến local chỉ có thể truy cập được từ bên trong phương thức hoặc khối lệnh đó và bị phá hủy khi phương thức hoặc khối lệnh đó kết thúc.
VD:
public class Numbers {
    public static void main(String[] args) {
        int x = 5;
        System.out.println(x);
    }
}

Biến instance:
- Biến instance là biến được khai báo bên trong một lớp, bên ngoài các phương thức, constructor và các block. 
- Biến instance được tạo ra khi một đối tượng được khởi tạo và bị phá hủy khi đối tượng đó bị phá hủy. 
- Biến instance có thể truy cập được từ bất kỳ phương thức nào của lớp đó.
- Biến instance có giá trị mặc định phụ thuộc vào kiểu dữ liệu của nó.
- Được phép sử dụng "access modifier" khi khai báo biến instance.
VD:
public class Numbers {
    int x = 5;
    public static void main(String[] args) {
        Numbers n1 = new Numbers();
        Numbers n2 = new Numbers();
        System.out.println(n1.x); // 5
        System.out.println(n2.x); // 5

Biến static:
- Biến static là biến được khai báo bên trong một lớp với từ khóa "static", phía bên ngoài các phương thức, constructor và block.
- Biến static có thể được truy cập từ bất kỳ đối tượng nào của lớp đó và từ các phương thức tĩnh (static) của lớp đó.
- Biến static được tạo khi chương trình bắt đầu chạy và chỉ bị phá hủy khi chương trình dừng.
- Các phương thức sử dụng biến static bằng cách gọi tên của nó khi phương thức đó cũng được khai báo với từ khóa "static".
VD:
public class Numbers {
    static int x = 5;
    public static void main(String[] args) {
        Numbers n1 = new Numbers();
        Numbers n2 = new Numbers();
        System.out.println(n1.x); // 5
        System.out.println(n2.x); // 5

----------------------------------16/03----------------------------------

Kế thừa (Inheritance): là cơ chế cho phép lớp con (subclass) được phép kế thừa các thuộc tính và phương thức của lớp cha (superclass), giúp cho việc phát triển phần mềm trở nên dễ dàng hơn bằng cách sử dụng các phương thức và thuộc tính có sẵn.
- Lớp con kế thừa tất cả thành phần của lớp cha, ngoại trừ các thành phần được khai báo là private.
- Constructor không được kế thừa
- Lớp con có thể gọi constructor của lớp cha.
- Lớp con có thể định nghĩa thêm các thuộc tính và phương thức mới.
- Java không cho phép đa kế thừa (mộtlớp kế thừa nhiều lớp cha).
Cú pháp:
class SubClass extends SupperClass
{
//Class body
}

Một số dạng kế thừa:
- Single: Một lớp kế thừa từ chỉ một lớp cha
- Multilevel: Một lớp kế thừa từ một lớp cha, lớp cha lại kế thừa từ lớp khác ở trên nó
- Hierarchical:Một lớp cha có nhiều lớp con với nhiều level khác nhau
- Multiple: Một lớp con kế thừa từ nhiều lớp cha

VD:
class Employee {
    float salary = 1000;
}
 
class Dev extends Employee {
    int bonus = 150;
}
 
public class InheritanceSample1 {
    public static void main(String args[]) {
        Dev p = new Dev();
        System.out.println("Dev salary is: " + p.salary);
        System.out.println("Bonus of Dev is: " + p.bonus);
    }
}

Override là cơ chế cho phép lớp con định nghĩa lại các phương thức đã được định nghĩa trước đó ở lớp cha.
Phương thức override ở lớp con có cùng tên, cùng danh sách tham số và kiểu dữ liệu trả về so với phương thức ở lớp cha.
Phương thức ở lớp con phải có access modifier có level bằng hoặc cao hơn so với phương thức ở lớp cha.
Từ khoá override được sử dụng để ghi đè phương thức.
@Override có thể được sử dụng để đánh dấu phương thức ghi đè.

VD:
class Animal {
    public void bark() {
        System.out.println("");
    }
}
 
public class Dog extends Animal {
    public void bark() {
        System.out.println("Go go");
    }
 
    public static void main(String args[]) {
        Dog dog = new Dog();
        dog.bark();
    }
}

Overloading trong java xảy ra nếu một lớp có nhiều phương thức có tên giống nhau nhưng khác nhau về kiểu dữ liệu hoặc số lượng các tham số.

VD:
class Add{  
    static int add(int a,int b);
    static int add(int a,int b,int c)
}  

Từ khóa final được sử dụng để khai báo một biến hoặc phương thức không thể thay đổi giá trị hoặc bị định nghĩa lại. Nếu một lớp được khai báo là final, nó sẽ không thể được kế thừa.
VD:
final double Pi = 3.14533937593;

Đa hình (Polymorphism) cho phép các đối tượng khác nhau thực thi chức năng giống nhau theo những cách khác nhau.

VD:
class Animal {
    public void speak() {
        System.out.println("");
    }
}
 
public class Dog extends Animal {
    public void speak() {
        System.out.println("Go go");
    }

public class Cat extends Animal {
    public void speak() {
        System.out.println("Meow");
    }

toString(): muốn đại diện bất kỳ đối tượng nào dưới dạng chuỗi, có thể sử dụng phương thức toString().

class Student{  
 int rollno;  
 String name;   
  
 Student(int rollno, String name){  
 this.rollno=rollno;  
 this.name=name;    
 }  
  
 public static void main(String args[]){  
   Student s1=new Student(101,"A");  
   Student s2=new Student(102,"B");  
     
   System.out.println(s1);
   System.out.println(s2); 
 }  
} 
Kết quả:
Student@7b23ec81
Student@6acbcfc0

class Student{  
 int rollno;  
 String name;   
  
 Student(int rollno, String name){  
 this.rollno=rollno;  
 this.name=name;   
 }  
   
 public String toString(){ 
  return rollno+" "+name;  
 }  
 public static void main(String args[]){  
   Student s1=new Student(101,"A");  
   Student s2=new Student(102,"B");  
     
   System.out.println(s1);
   System.out.println(s2); 
 }  
}  
Kết quả
101 A
102 B

----------------------------------21/03----------------------------------

Sử dụng Comparable khi ta muốn bản thân đối tượng đó tự so sánh theo một tiêu chí đã định nghĩa trước.
Khi ta implement Comparable cho một class, bắt buộc ta phải override lại phương thức compareTo(Object obj) cho class đó.

Phương thức compareTo() có kiểu trả về là int và có quy ước:

Giá trị trả về < 0: phần tử hiện tại < phần tử khác
Giá trị trả về = 0: phần tử hiện tại = phần tử khác
Giá trị trà về > 0: phần tử hiện tại > phần tử khác

Sử dụng Comparator khi cần so sánh một cách linh hoạt hơn. Comparator tách logic sắp xếp khỏi đối tượng và chứa compare() trong phương thức sort().
Comparator linh hoạt hơn Comparable ở chỗ, nếu phương thức compareTo() của Comparable chỉ được override lại một lần và chỉ có thể xét được 1 tiêu chí nhất định thì phương thức compare() của Comparator có thể được gọi nhiều lần và định nghĩa ngay tại vị trí cần so sánh để sắp xếp theo các tiêu chí tùy ý.

Khác nhau giữa Comparable và Comparator:
Comparable:
- Phải implements giao tiếp Comparable cho lớp đối tượng cần được so sánh.
- Comparable cung cấp phương thức compareTo() để sắp xếp các phần tử.	
- Comparable thuộc về java.lang package.
- Có thể sắp xếp các phần tử của kiểu Comparable bởi phương thức Collections.sort(List).

Comparator:
- Không phải implements giao tiếp Comparator cho lớp đối tượng cần được so sánh
- Comparator cung cấp phương thức compare() để sắp xếp các phần tử.
- Comparator thuộc về java.util package
- Có thể sắp xếp các phần tử của kiểu Comparator bởi phương thức Collections.sort(List, Comparator).

----------------------------------27/03----------------------------------

Stack (ngăn xếp) là một cấu trúc dữ liệu hoạt động theo nguyên tắc LIFO (Last In First Out), vào sau ra trước. 

push(): lưu giữ một phần tử trên ngăn xếp.

pop(): xóa một phần tử từ ngăn xếp.

peek(): lấy phần tử dữ liệu ở trên cùng của ngăn xếp, mà không xóa phần tử này.

isFull(): kiểm tra xem ngăn xếp đã đầy hay chưa.

isEmpty(): kiểm tra xem ngăn xếp là trống hay không.

Tại mọi thời điểm, chúng ta duy trì một con trỏ tới phần tử dữ liệu vừa được PUSH cuối cùng vào trên ngăn xếp. Vì con trỏ này luôn biểu diễn vị trí trên cùng của ngăn xếp vì thế được đặt tên là top. Con trỏ top cung cấp cho chúng ta giá trị của phần tử trên cùng của ngăn xếp mà không cần phải thực hiện hoạt động xóa ở trên (hoạt động pop).

Queue là một cấu trúc dữ liệu danh sách, trong đó việc thêm và lấy các phần tử được thực hiện theo quy tắc FIFO (Fist-In/First-Out).

enqueue(): thêm (hay lưu trữ) một phần tử vào trong hàng đợi.

dequeue(): xóa một phần tử từ hàng đợi.

peek(): lấy phần tử ở đầu hàng đợi, mà không xóa phần tử này.

isFull(): kiểm tra xem hàng đợi là đầy hay không.

isEmpty(): kiểm tra xem hàng đợi là trống hay hay không.



































