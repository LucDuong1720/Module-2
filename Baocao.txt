.	----------------------------------15/03----------------------------------
Access modifier:
Quy định mức độ truy cập đến lớp và các thành phần của lớp.
- Có 4 phạm vi truy cập của Access modifier:
+ private: Phương thức và thuộc tính chỉ truy cập được ở phạm vi class.
+ default: Nếu không khai báo kiểu access modifier nào thì nó mặc định là default. Default chỉ truy cập được ở phạm vi class và package
+ protected: Phương thức và thuộc tính truy cập ở phạm vi một lớp, một package hoặc các lớp con của lớp đó.
+ public: Truy cập ở mọi nơi.

Biến static trong java:
- Được sử dụng để tham chiếu thuộc tính chung của tất cả các đối tượng.
VD: Codegym tên trung tâm đào tạo lập trình của các học viên thuộc trung tâm này.

Nested class:
- Nested class là một lớp được khai báo bên trong một lớp khác. Trong Java, có hai loại nested class là static nested class và non-static (inner) class.

+ Static nested class: được khai báo là một lớp tĩnh bên trong một lớp khác và được gắn liền với lớp bên ngoài nó. Nó có thể truy cập các thành viên tĩnh của lớp bên ngoài.	
+ Non-static (inner) class: trực thuộc một đối tượng của lớp bên ngoài, có thể truy xuất đến các thành phần của lớp bên ngoài.

Biến local:
- Biến local là biến được khai báo bên trong một phương thức hoặc một khối lệnh. Biến local chỉ có thể truy cập được từ bên trong phương thức hoặc khối lệnh đó và bị phá hủy khi phương thức hoặc khối lệnh đó kết thúc.
VD:
public class Numbers {
    public static void main(String[] args) {
        int x = 5;
        System.out.println(x);
    }
}

Biến instance:
- Biến instance là biến được khai báo bên trong một lớp, bên ngoài các phương thức, constructor và các block. 
- Biến instance được tạo ra khi một đối tượng được khởi tạo và bị phá hủy khi đối tượng đó bị phá hủy. 
- Biến instance có thể truy cập được từ bất kỳ phương thức nào của lớp đó.
- Biến instance có giá trị mặc định phụ thuộc vào kiểu dữ liệu của nó.
- Được phép sử dụng "access modifier" khi khai báo biến instance.
VD:
public class Numbers {
    int x = 5;
    public static void main(String[] args) {
        Numbers n1 = new Numbers();
        Numbers n2 = new Numbers();
        System.out.println(n1.x); // 5
        System.out.println(n2.x); // 5

Biến static:
- Biến static là biến được khai báo bên trong một lớp với từ khóa "static", phía bên ngoài các phương thức, constructor và block.
- Biến static có thể được truy cập từ bất kỳ đối tượng nào của lớp đó và từ các phương thức tĩnh (static) của lớp đó.
- Biến static được tạo khi chương trình bắt đầu chạy và chỉ bị phá hủy khi chương trình dừng.
- Các phương thức sử dụng biến static bằng cách gọi tên của nó khi phương thức đó cũng được khai báo với từ khóa "static".
VD:
public class Numbers {
    static int x = 5;
    public static void main(String[] args) {
        Numbers n1 = new Numbers();
        Numbers n2 = new Numbers();
        System.out.println(n1.x); // 5
        System.out.println(n2.x); // 5

----------------------------------16/03----------------------------------

Kế thừa (Inheritance): là cơ chế cho phép lớp con (subclass) được phép kế thừa các thuộc tính và phương thức của lớp cha (superclass), giúp cho việc phát triển phần mềm trở nên dễ dàng hơn bằng cách sử dụng các phương thức và thuộc tính có sẵn.
- Lớp con kế thừa tất cả thành phần của lớp cha, ngoại trừ các thành phần được khai báo là private.
- Constructor không được kế thừa
- Lớp con có thể gọi constructor của lớp cha.
- Lớp con có thể định nghĩa thêm các thuộc tính và phương thức mới.
- Java không cho phép đa kế thừa (mộtlớp kế thừa nhiều lớp cha).
Cú pháp:
class SubClass extends SupperClass
{
//Class body
}

Một số dạng kế thừa:
- Single: Một lớp kế thừa từ chỉ một lớp cha
- Multilevel: Một lớp kế thừa từ một lớp cha, lớp cha lại kế thừa từ lớp khác ở trên nó
- Hierarchical:Một lớp cha có nhiều lớp con với nhiều level khác nhau
- Multiple: Một lớp con kế thừa từ nhiều lớp cha

VD:
class Employee {
    float salary = 1000;
}
 
class Dev extends Employee {
    int bonus = 150;
}
 
public class InheritanceSample1 {
    public static void main(String args[]) {
        Dev p = new Dev();
        System.out.println("Dev salary is: " + p.salary);
        System.out.println("Bonus of Dev is: " + p.bonus);
    }
}

Override là cơ chế cho phép lớp con định nghĩa lại các phương thức đã được định nghĩa trước đó ở lớp cha.
Phương thức override ở lớp con có cùng tên, cùng danh sách tham số và kiểu dữ liệu trả về so với phương thức ở lớp cha.
Phương thức ở lớp con phải có access modifier có level bằng hoặc cao hơn so với phương thức ở lớp cha.
Từ khoá override được sử dụng để ghi đè phương thức.
@Override có thể được sử dụng để đánh dấu phương thức ghi đè.

VD:
class Animal {
    public void bark() {
        System.out.println("");
    }
}
 
public class Dog extends Animal {
    public void bark() {
        System.out.println("Go go");
    }
 
    public static void main(String args[]) {
        Dog dog = new Dog();
        dog.bark();
    }
}

Overloading trong java xảy ra nếu một lớp có nhiều phương thức có tên giống nhau nhưng khác nhau về kiểu dữ liệu hoặc số lượng các tham số.

VD:
class Add{  
    static int add(int a,int b);
    static int add(int a,int b,int c)
}  

Từ khóa final được sử dụng để khai báo một biến hoặc phương thức không thể thay đổi giá trị hoặc bị định nghĩa lại. Nếu một lớp được khai báo là final, nó sẽ không thể được kế thừa.
VD:
final double Pi = 3.14533937593;

Đa hình (Polymorphism) cho phép các đối tượng khác nhau thực thi chức năng giống nhau theo những cách khác nhau.

VD:
class Animal {
    public void speak() {
        System.out.println("");
    }
}
 
public class Dog extends Animal {
    public void speak() {
        System.out.println("Go go");
    }

public class Cat extends Animal {
    public void speak() {
        System.out.println("Meow");
    }

toString(): muốn đại diện bất kỳ đối tượng nào dưới dạng chuỗi, có thể sử dụng phương thức toString().

class Student{  
 int rollno;  
 String name;   
  
 Student(int rollno, String name){  
 this.rollno=rollno;  
 this.name=name;    
 }  
  
 public static void main(String args[]){  
   Student s1=new Student(101,"A");  
   Student s2=new Student(102,"B");  
     
   System.out.println(s1);
   System.out.println(s2); 
 }  
} 
Kết quả:
Student@7b23ec81
Student@6acbcfc0

class Student{  
 int rollno;  
 String name;   
  
 Student(int rollno, String name){  
 this.rollno=rollno;  
 this.name=name;   
 }  
   
 public String toString(){ 
  return rollno+" "+name;  
 }  
 public static void main(String args[]){  
   Student s1=new Student(101,"A");  
   Student s2=new Student(102,"B");  
     
   System.out.println(s1);
   System.out.println(s2); 
 }  
}  
Kết quả
101 A
102 B

----------------------------------21/03----------------------------------

Sử dụng Comparable khi ta muốn bản thân đối tượng đó tự so sánh theo một tiêu chí đã định nghĩa trước.
Khi ta implement Comparable cho một class, bắt buộc ta phải override lại phương thức compareTo(Object obj) cho class đó.

Phương thức compareTo() có kiểu trả về là int và có quy ước:

Giá trị trả về < 0: phần tử hiện tại < phần tử khác
Giá trị trả về = 0: phần tử hiện tại = phần tử khác
Giá trị trà về > 0: phần tử hiện tại > phần tử khác

Sử dụng Comparator khi cần so sánh một cách linh hoạt hơn. Comparator tách logic sắp xếp khỏi đối tượng và chứa compare() trong phương thức sort().
Comparator linh hoạt hơn Comparable ở chỗ, nếu phương thức compareTo() của Comparable chỉ được override lại một lần và chỉ có thể xét được 1 tiêu chí nhất định thì phương thức compare() của Comparator có thể được gọi nhiều lần và định nghĩa ngay tại vị trí cần so sánh để sắp xếp theo các tiêu chí tùy ý.

Khác nhau giữa Comparable và Comparator:
Comparable:
- Phải implements giao tiếp Comparable cho lớp đối tượng cần được so sánh.
- Comparable cung cấp phương thức compareTo() để sắp xếp các phần tử.	
- Comparable thuộc về java.lang package.
- Có thể sắp xếp các phần tử của kiểu Comparable bởi phương thức Collections.sort(List).

Comparator:
- Không phải implements giao tiếp Comparator cho lớp đối tượng cần được so sánh
- Comparator cung cấp phương thức compare() để sắp xếp các phần tử.
- Comparator thuộc về java.util package
- Có thể sắp xếp các phần tử của kiểu Comparator bởi phương thức Collections.sort(List, Comparator).

----------------------------------27/03----------------------------------

Stack (ngăn xếp) là một cấu trúc dữ liệu hoạt động theo nguyên tắc LIFO (Last In First Out), vào sau ra trước. 

push(): lưu giữ một phần tử trên ngăn xếp.

pop(): xóa một phần tử từ ngăn xếp.

peek(): lấy phần tử dữ liệu ở trên cùng của ngăn xếp, mà không xóa phần tử này.

isFull(): kiểm tra xem ngăn xếp đã đầy hay chưa.

isEmpty(): kiểm tra xem ngăn xếp là trống hay không.

Tại mọi thời điểm, chúng ta duy trì một con trỏ tới phần tử dữ liệu vừa được PUSH cuối cùng vào trên ngăn xếp. Vì con trỏ này luôn biểu diễn vị trí trên cùng của ngăn xếp vì thế được đặt tên là top. Con trỏ top cung cấp cho chúng ta giá trị của phần tử trên cùng của ngăn xếp mà không cần phải thực hiện hoạt động xóa ở trên (hoạt động pop).

Queue là một cấu trúc dữ liệu danh sách, trong đó việc thêm và lấy các phần tử được thực hiện theo quy tắc FIFO (Fist-In/First-Out).

enqueue(): thêm (hay lưu trữ) một phần tử vào trong hàng đợi.

dequeue(): xóa một phần tử từ hàng đợi.

peek(): lấy phần tử ở đầu hàng đợi, mà không xóa phần tử này.

isFull(): kiểm tra xem hàng đợi là đầy hay không.

isEmpty(): kiểm tra xem hàng đợi là trống hay hay không.


----------------------------------03/04----------------------------------
Làm thế nào để Set/HashSet đảm bảo các phần tử không trùng lặp:
Mỗi key trong HashMap là duy nhất, từ đó mỗi phần tử trong HashSet sẽ là 1 key trong HashMap với một value là một hằng số PRESENT.
Nếu HashMap#put method trả về phần value khi của key khi nó đã tồn tại trước đó hoặc trả về null khi chưa tồn tại. Vì vậy nếu HashMap.put() trả về null nghĩa là thêm phần tử thành công.

import java.util.HashSet;

public class Example {
  public static void main(String[] args) {
    HashSet<String> set = new HashSet<String>();
    set.add("A");
    set.add("B");
    set.add("C");
    set.add("A"); // Thêm phần tử trùng lặp
    System.out.println(set); // In ra [A, B, C], phần tử trùng lặp sẽ không được thêm vào
  }
}


----------------------------------04/04----------------------------------

Kĩ thuật đổi tên biến: Giúp cho tên biến có ý nghĩa, dễ đọc và dễ hiểu hơn nhưng không làm ảnh hưởng đến chức năng của nó.
int x = 10;

int numberOfStudents = 10;

Kĩ thuật đổi tên phương thức: Giúp cho tên phương có ý nghĩa, dễ đọc và dễ hiểu hơn nhưng không làm ảnh hưởng đến chức năng của nó.

public static void show() {
}

public static void showProductsView() {}

Kĩ thuật tách biến: Là kỹ thuật biến các biểu thức khó hiểu, phức tạp thành các biến nhỏ hơn trong mã nguồn. Việc tách biến có thể giúp cho mã nguồn trở nên dễ đọc hơn, dễ hiểu hơn và dễ bảo trì hơn. Ngoài ra, tách biến cũng có thể giúp cải thiện tính năng và hiệu suất của chương trình.

private static boolean isLeapYear(int year){
  if(year % 4 == 0){
    if (year % 100 == 0){
      if(year % 400 == 0)
	  return true;
    } else {
	return true;
    }
  }
  return false;
}
Sau khi xử lý:
private static boolean isLeapYear(int year){ 
  boolean isDivisibleBy4 = year % 4 == 0; 
  if(isDivisibleBy4){
    boolean isDivisibleBy100 = year % 100 == 0;
    if (isDivisibleBy100){
	boolean isDivisibleBy400 = year % 400 == 0;
	if(isDivisibleBy400) return
	  true;
    } else {
	return true;
    }
  }
  return false;
}

Kĩ thuật tách hằng: Giúp mang lại ý nghĩa cho các giá trị magic value làm mã nguồn dễ hiểu hơn.

public static boolean isAuthorized(introle){
if(role == 1){
return true;
}
return false;
}

public static final int ROLE_ADMIN = 1;
public static boolean isAuthorized(introle){
if(role == ROLE_ADMIN){
return true;
}
return false;
}

Kĩ thuật tách phương thức: Giúp ta tách các phương thức quá dài, quá phức tạp hoặc xử lý quá nhiều tác vụ dẫn đến khó hiểu và khó kiểm soát. Tách phương thức giúp mã nguồn dễ hiểu và dễ kiểm soát hơn.
public static int getDaysOfMonth(int month, int year){
  switch (month){
   case 1:
   case 3:
   case 5:
   case 7:
   case 8:
   case 10:
   case 12:
	return 31;
   case 4:
   case 6:
   case 9:
   case 11:
	return 30;
   case 2:
boolean isLeapYear =false; if(year % 4 == 0){
  if (year % 100 == 0){
    if(year % 400 == 0)
    isLeapYear = true;
  } else {
    isLeapYear = true;
  }
}
if(isLeapYear){ return
  29;
} else {
  return 28;
}
default:
  return 0;
}
}
Sau khi tách phương thức.

public static int getDaysOfMonth(int month, int year){
  switch (month){
   case 1:
   case 3:
   case 5:
   case 7:
   case 8:
   case 10:
   case 12:
	return 31;
   case 4:
   case 6:
   case 9:
   case 11:
	return 30;
   case 2:
   boolean isLeapYear =isLeapYear(year);
   if(isLeapYear){ 
     return 29;
   } else {
     return 28;
   }
 default:
  return 0;
 }
}


private static boolean isLeapYear(int year){
  boolean isLeapYear =false; 
if(year % 4 == 0){
if (year % 100 == 0){
if(year % 400 == 0) 
isLeapYear = true;
} else {
isLeapYear = true;
}
}
return isLeapYear;
}


----------------------------------05/04----------------------------------

4 Tính chất lập trình hướng đối tượng:
- Tính đa hình (Polymorphism): Đa hình là khả năng của một đối tượng có thể có nhiều hình thái khác nhau. Các đối tượng khác nhau có thể sử dụng cùng một phương thức nhưng với cách thức khác nhau. Tính năng này giúp cho mã có thể được viết ngắn gọn và dễ hiểu hơn.
Đối tượng khác nhau thực thi chức năng giống nhau theo những cách khác nhau.
Trong Java, chúng ta sử dụng nạp chồng phương thức (method overloading) và ghi đè phương thức (method overriding) để có tính đa hình.

Nạp chồng (Overloading): Đây là khả năng cho phép một lớp có nhiều thuộc tính, phương thức cùng tên nhưng với các tham số khác nhau về loại cũng như về số lượng. Khi được gọi, dựa vào tham số truyền vào, phương thức tương ứng sẽ được thực hiện.

Ghi đè (Overriding): là hai phương thức cùng tên, cùng tham số, cùng kiểu trả về nhưng thằng con viết lại và dùng theo cách của nó, và xuất hiện ở lớp cha và tiếp tục xuất hiện ở lớp con. Khi dùng override, lúc thực thi, nếu lớp Con không có phương thức riêng, phương thức của lớp Cha sẽ được gọi, ngược lại nếu có, phương thức của lớp Con được gọi.

- Tính đóng gói (Encapsulation): Đóng gói là quá trình ẩn thông tin của một đối tượng, chỉ cung cấp các phương thức public để truy cập. Việc cho phép môi trường bên ngoài tác động lên các dữ liệu nội tại của một đối tượng theo cách nào là hoàn toàn tùy thuộc vào người viết mã. Đây là tính chất đảm bảo sự toàn vẹn, bảo mật của đối tượng.
Tính đóng gói được thể hiện thông qua phạm vi truy cập (access modifier). Ngoài ra, các lớp liên quan đến nhau có thể được gom chung lại thành package.

- Tính trừu tượng (Abstraction): Trừu tượng là tính năng cho phép lập trình viên tập trung vào các đặc tính quan trọng của đối tượng mà không cần quan tâm đến chi tiết bên trong. Tính năng này giúp cho mã có thể được viết ngắn gọn và dễ hiểu hơn, đồng thời giúp cho phát triển phần mềm linh hoạt hơn và dễ dàng bảo trì hơn.
Trong Java, chúng là sử dụng abstract class và abstract interface để có tính trừu tượng.

- Tính kế thừa (Inheritance): Kế thừa là tính năng cho phép một đối tượng được tạo ra dựa trên một đối tượng hiện có, đối tượng mới kế thừa các thuộc tính và phương thức của đối tượng hiện có. Có thể chia sẻ hay mở rộng các đặc tính sẵn có mà không phải tiến hành định nghĩa lại. Đồng thời tái sử dụng mã nguồn.

S.O.L.I.D:

- Single responsibility principle: Một class chỉ nên giữ 1 trách nhiệm duy nhất (Chỉ có thể sửa đổi class với 1 lý do duy nhất).

- Open/closed principle: Có thể thoải mái mở rộng 1 class, nhưng không được sửa đổi bên trong class đó.
Theo nguyên lý này, mỗi khi ta muốn thêm chức năng,.. cho chương trình, chúng ta nên viết class mới mở rộng class cũ ( bằng cách kế thừa hoặc sở hữu class cũ) không nên sửa đổi class cũ.

- Liskov Substitution Principle: Trong một chương trình, các object của class con có thể thay thế class cha mà không làm thay đổi tính đúng đắn của chương trình.
Hãy tưởng tượng bạn có 1 class cha tên Vịt. Các class VịtBầu, VịtXiêm có thể kế thừa class này, chương trình chạy bình thường. Tuy nhiên nếu ta viết class VịtChạyPin, cần pin mới chạy được. Khi class này kế thừa class Vịt, vì không có pin không chạy được, sẽ gây lỗi. Đó là 1 trường hợp vi phạm nguyên lý này.

- Interface Segregation Principle: Thay vì dùng 1 interface lớn, ta nên tách thành nhiều interface nhỏ, với nhiều mục đích cụ thể.
Hãy tưởng tượng chúng ta có 1 interface lớn, khoảng 100 methods. Việc implements sẽ khá cực khổ, ngoài ra còn có thể dư thừa vì 1 class không cần dùng hết 100 method. Khi tách interface ra thành nhiều interface nhỏ, gồm các method liên quan tới nhau, việc implement và quản lý sẽ dễ hơn.

- Dependency inversion principle: Các module cấp cao không nên phụ thuộc vào các modules cấp thấp. Cả 2 nên phụ thuộc vào abstraction.
Interface (abstraction) không nên phụ thuộc vào chi tiết, mà ngược lại.(Các class giao tiếp với nhau thông qua interface, không phải thông qua implementation.)

Chúng ta đều biết 2 loại đèn: đèn tròn và đèn huỳnh quang. Chúng cùng có đuôi tròn, do đó ta có thể thay thế đèn tròn bằng đèn huỳnh quanh cho nhau 1 cách dễ dàng.
Ở đây, interface chính là đuôi tròn, implementation là bóng đèn tròn và bóng đèn huỳnh quang. Ta có thể swap dễ dàng giữa 2 loại bóng vì ổ điện chỉ quan tâm tới interface (đuôi tròn), không quan tâm tới implementation.

Trong code cũng vậy, khi áp dụng Dependency Inverse, ta chỉ cần quan tâm tới interface. Để kết nối tới database, ta chỉ cần gọi hàm Get, Save … của Interface IDataAccess. Khi thay database, ta chỉ cần thay implementation của interface này.

----------------------------------06/04----------------------------------
Ngoại lệ: là các lỗi phát sinh trong quá trình thực thi và làm ngừng quá trình thực thi chương trình đó.

Xử lý ngoại lệ với try/catch: khối try/catch/finally: hoạt động như thế nào, ví dụ

Xử lý ngoại lệ với try/catch: Khi một ngoại lệ xảy ra trong khối try, nó sẽ được ném (throw) ra và kiểm tra xem có khớp với bất kỳ khối catch nào trong cùng phạm vi hay không. Nếu có, chương trình sẽ nhảy tới khối catch tương ứng và xử lý ngoại lệ.

Cúpháp:
try {
	Statement_1; 
	Statement_2;
}
catch (ExceptionType ObjectName){
	Statement_1;
}

Khối finally được sử dụng để chứa mã mà bạn muốn chạy dù có ngoại lệ hay không.

Cúpháp:
try {
	Statement_1; 
	Statement_2;
}
catch(ExceptionType ObjectName){
	Statement_1;
}
finally{
	//Clean up code 
	Statement_1;
}

Các ném ngoại lệ: lệnh throw và throws hoạt động như thế nào

Ném ngoại lệ: Sử dụng lệnh throw để ném ra các ngoại lệ có sẵn hoặc các lỗi do người dùng tự định nghĩa. Sau đó các lệnh này sẽ được bắt lại và xử lý.

Lệnh throw được sử dụng để tạo ra một ngoại lệ trong một phương thức và ném nó ra cho phương thức gọi để xử lý.

Từ khóa throws được dùng với phương thức để gây ra bất cứ checked hay unchecked exception nào và đồng thời nhường công việc xử lý ngoại lệ đó cho người gọi phương thức này.

----------------------------------07/04----------------------------------

Làm việc với file trong Java:
Package java.io có lớp File cho phép bạn làm việc với các file (tệp). Thường để bắt đầu, cần tạo ra một đối tượng File bằng khởi tạo với tham số đường dẫn

import java.io.File;
...
File file = new File("C:\\data\\input-file.txt");
Một số phương thức lớp File:
exists() kiểm tra xem file có tồn tại hay không

getName() lấy tên file (input-file.txt)

getParent() lấy đường dẫn thư mục của file

getPath() đường dẫn đầy đủ

isDirectory() kiểm tra xem là thư mục hay không

isFile() kiểm tra xem là file hay không

length() cỡ file (byte)

createNewFile() tạo ra file mới

delete() xóa file

list() lấy tên file, thư mục chứa trong đường dẫn

mkdir() tạo thư mục

renameTo(File dest) đổi tên file

FileReader thực hiện đọc file text.

Các constructor của lớp FileReader:
FileReader(String file)	Nó mở file với tên file ở dạng string đã cho ở chế độ đọc. Nếu tập tin không tồn tại, nó ném ra ngoại lệ FileNotFoundException.
FileReader(File file)	Nó mở file với thể hiện của file đã cho ở chế độ đọc. Nếu tập tin không tồn tại, nó ném ra ngoại lệ FileNotFoundException.

Các phương thức của lớp FileReader:
int read()	Nó được sử dụng để trả về một ký tự trong mẫu ASCII. Nó trả về -1 vào cuối tập tin.
void close()	Nó được sử dụng để đóng lớp FileReader.

FileWriter thực hiệ nghi chuỗi ký tự ra file text.

Các constructor của lớp FileWriter:
FileWriter(String file)	Tạo ra một file mới với giá trị truyền vào là tên file.
FileWriter(File file)	Tạo ra một file mới với giá trị truyền vào là đối tượng file.
Các phương thức của lớp FileWriter

Phương thức:
void write(String text)	Nó được sử dụng để ghi string vào FileWriter.
void write(char c)	Nó được sử dụng để ghi char vào FileWriter.
void write(char[] c)	Nó được sử dụng để ghi mảng char vào FileWriter.
void flush()	      Nó được sử dụng để xả dữ liệu của FileWriter.
void close()	      Nó được sử dụng để đóng FileWriter.

BufferedReader trong java được sử dụng để đọc văn bản từ một input stream dựa trên các ký tự (character stream). Nó có thể được sử dụng để đọc dữ liệu theo dòng (line by line) bằng phương thức readLine().

Các constructor của lớp BufferedReader
BufferedReader(Reader rd)	      Nó được sử dụng để tạo ra thể hiện của BufferedReader mà sử dụng kích thước mặc định cho một bộ đệm đầu vào.
BufferedReader(Reader rd, int size)	Nó được sử dụng để tạo ra thể hiện của BufferedReader có sử dụng kích thước quy định cho một bộ đệm đầu vào.

Các phương thức của lớp BufferedReader
int read()	Nó được sử dụng để đọc ký tự vật duy nhất.
int read(char[] cbuf, int off, int len)	Nó được sử dụng để đọc các ký tự thành một phần của một mảng.
boolean markSupported()	Nó được sử dụng để kiểm tra input stream có hỗ trợ các phương thức mark() và reset() không.
String readLine()	Nó được sử dụng để đọc một dòng văn bản.
boolean ready()	Nó được sử dụng để kiểm tra liệu các input stream đã sẵn sàng để được đọc.
long skip(long n)	Nó được sử dụng để bỏ qua n ký tự.
void reset()	Nó định vị lại stream tại vị trí mà phương thức đánh dấu lần cuối được gọi vào input stream này.
void mark(int readAheadLimit)	Nó được sử dụng để đánh dấu vị trí hiện tại trong một stream.
void close()	Nó đóng các dòng đầu vào và giải phóng bất kỳ tài nguyên hệ thống nào liên kết đến stream.

BufferedWriter trong java được sử dụng để cung cấp bộ đệm cho các các thể hiện của lớp Writer. Nó giúp hiệu suất nhanh. Nó thừa kế lớp Writer. Các ký tự đệm được sử dụng để cung cấp việc ghi dữ liệu hiệu quả với các mảng đơn, các ký tự và chuỗi.

Các constructor của lớp BufferedWriter
BufferedWriter(Writer wrt)			Nó được sử dụng để tạo ra thể hiện của BufferedWriter có sử dụng kích thước mặc định cho một bộ đệm đầu ra.
BufferedWriter(Writer wrt, int size)	Nó được sử dụng để tạo ra thể hiện của BufferedWriter mà sử dụng kích thước quy định cho một bộ đệm đầu ra.

Các phương thức của lớp BufferedWriter
void newLine()	Nó được sử dụng để thêm một dòng mới với dấu xuống dòng.
void write(int c)	Nó được sử dụng để ghi một ký tự duy nhất.
void write(char[] cbuf, int off, int len)	Nó được sử dụng để ghi một phần của một mảng các ký tự.
void write(String s, int off, int len)	Nó được sử dụng để ghi một phần của một chuỗi.
void flush()	Nó được sử dụng để xả BufferedWriter .
void close()	Nó được sử dụng để đóng BufferedWriter

Phân biệt khi nào dùng FileReader và BufferedWriter:
FileReader được sử dụng để đọc các ký tự từ tệp tin. Nó có thể đọc dữ liệu một ký tự hoặc một đoạn ký tự từ tệp tin. Nó cung cấp các phương thức để đọc dữ liệu và trả về các giá trị của các ký tự được đọc. FileReader nên được sử dụng khi bạn muốn đọc dữ liệu văn bản từ tệp tin.

BufferedWriter được sử dụng để ghi dữ liệu vào tệp tin. Nó cung cấp các phương thức để ghi dữ liệu theo kiểu văn bản và kiểu nhị phân. BufferedWriter nên được sử dụng khi bạn muốn ghi dữ liệu vào tệp tin.

----------------------------------12/04----------------------------------

Multithreading nghĩa là có nhiều thread thực thi cùng lúc trong một chương trình nhầm tối ưu tài nguyên của CPU, tăng tốc độ xử lý và trải nghiệm người dùng. 

Multitasking: Một máy tính có thể thực thi cùng một lúc nhiều chương trình khác nhau. Hệ thống sẽ điều khiển mỗi CPU luân phiên thực thi mỗi chương trình trong một khoảng thời sau đó chuyển sang thực thi các chương trình khác. Chúng ta không còn giả định được chương trình của mình chiếm toàn bộ thời gian CPU mà nó chỉ chiếm một khoảng được hệ thống cấp cho. 

Thread: là đơn vị nhỏ nhất của mã thực thi mà đoạn mã đó thực hiện một nhiệm vụ cụ thể.
Một ứng dụng có thể được chia nhỏ thành nhiều nhiệm vụ và mỗi nhiệm vụ có thể được giao cho một thread.
Nhiều thread cùng thực hiện đồng thời được gọi là đa luồng (Multi-Thread)

Đồng bộ hoá chính là việc sắp xếp thứ tự các thread khi truy xuất vào cùng đối tượng sao cho không có sự xung đột dữ liệu.
Để đảm bảo rằng một nguồn tài nguyên chia sẻ được sử dụng bởi một thread tại một thời điểm, chúng ta sử dụng đồng bộ hoá.
