public class CompareByAge implements Comparator<Employee> {
    @Override
    public int compare(Employee o1, Employee o2) {   // so sánh 2 đối tượng bằng cách nhờ 1 đối tượng trung gian
        if (o1.getAge() > o2.getAge()) {
            return 1;					// Nếu giá trị trả về = 1 thì o1 > o2
        } else if (o1.getAge()==o2.getAge()) {
            return 0;					// Nếu giá trị trả về = 1 thì o1 = o2
        }else{
            return -1;					// Nếu giá trị trả về = -1 thì o1 < o2
        }

    }
}

Trong interface Comparable có phương thức  public int compareTo(Employee o) 
@Override
    public int compareTo(Employee o) {
        if (this.age > o.getAge()) {
            return 1;
        } else if (this.age == o.getAge()) {
            return 0;
        }else
            return -1;
    }

+ Bản thân đối tượng đó tự so sánh với 1 đối tượng khác theo một tiêu chí đã định nghĩa trước.


@Override							// Sử dụng equals để so sánh vì nếu so sánh theo kiểu == sẽ so sánh theo địa chỉ của 2 đối tượng (so sánh tham chiếu)
    public boolean equals(Object obj) {		// Để so sánh bằng equals chúng ta phải override lại phương thức equals và hashcode
        if (this == obj) {
            return true;
        }
        if (obj instanceof Employee) {
            Employee o1 = (Employee) obj;
            if (this.getName().equals(o1.getName()) && this.getAge() == ((Employee) obj).getAge()
            && this.getSalary() == ((Employee) obj).getSalary()) {
                return true;
            }
        }
        return false;
    }

								// Khi chúng ta override equals thì phải override hashCode vì 2 đối tượng bằng nhau phải có cùng mã hashCode()
    @Override
    public int hashCode() {
        return Objects.hash(this.age, this.name, this.salary);
    }

---------------------------------------------------------------------------------------------------------------------------------------------------
LinkedList

public void addFirst(E e) {
            Node newNode = new Node<>(e); // Tạo node mới
            newNode.next = head; // Link node mới với head
            head = newNode; // head sẽ thành nốt mới
            size++; // Tăng kích cỡ lên 1.	
            
            if (tail == null) // Nếu chỉ có 1 node trong list thì tail = head.
                tail = head;
        }


public void addLast(E e) {
            Node newNode = new Node<>(e); // Tạo node mới

            if (tail == null) {
                head = tail = newNode; // Nếu rỗng head và tail sẽ trỏ tới node mới
            }
            else {
                tail.next = newNode; // Nếu không rỗng liên kết với node cuối cùng trong danh sách
                tail = tail.next; // tail sẽ trỏ tới node mới
            }

            size++; // Tăng kích cỡ lên 1
        }

public void add(int index, E e) {
            if (index == 0) addFirst(e); // Nếu index = 0, gọi addFirst chèn vào đầu
            else if (index >= size) addLast(e); // Nếu index lớn hơn hoặc bằng size, gọi addLast chèn vào cuối danh sách
            else { // Trường hợp còn lại, node mới được chèn vào giữa node current và temp
                Node current = head;
                for (int i = 1; i < index; i++)
                    current = current.next;
                Node temp = current.next;
                current.next = new Node(e);
                (current.next).next = temp;
                size++;
            }
        }

public E removeFirst() {
            if (size == 0) return null; // Nếu size = 0 thì return null;
            else {
                Node temp = head; 		// Xoá phần tử khỏi dánh sách bằng cách trỏ head tới node thứ hai.
                head = head.next; 
                size--; // Kích thước sẽ giảm 1 sau khi xoá
                if (head == null) tail = null; // Nếu danh sách trở nên rỗng sau khi gỡ bỏ phần tử, tail phải được đặt thành null 
                return temp.element; 
            }
        }

public E removeLast() {
            if (size == 0) return null; // Nếu size = 0 thì return null;
            else if (size == 1) { // Nếu danh sách chỉ có 1 node.
                Node temp = head;
                head = tail = null;
                size = 0;	// Kích thước sẽ = 0
                return temp.element;
            } else {
                Node current = head;

                for (int i = 0; i < size - 2; i++)
                    current = current.next;

                Node temp = tail;		// Node cuối cùng bị xoá và tail được xác định lại để trỏ tới node thứ 2.
                tail = current;
                tail.next = null;
                size--; // Kích thước giảm đi 1
                return temp.element;
            }
        }

   public E remove(int index) {
            if (index < 0 || index >= size) return null; // Nếu index vượt quá danh sách trả về null
            else if (index == 0) return removeFirst(); // Nếu index = 0 gọi removeFist
            else if (index == size - 1) return removeLast(); // Nếu index = size - 1, gọi removeLast
            else { // Xác định vị trí node tại index. Đặt current xác định node này và previous xác định node trước nó. Gán current.next cho previous.next để loại bỏ node hiện tại.
                Node previous = head;

                for (int i = 1; i < index; i++) {
                    previous = previous.next;
                }

                Node current = previous.next;
                previous.next = current.next;
                size--;
                return current.element;
            }
        }